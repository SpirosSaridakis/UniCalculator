

<div class="card m-2 shadow-lg" style="width: 25rem;">
    <div class="card-body">
        <h5 class="card-title card-title-underline">@Title</h5>
        <div class="d-flex flex-column justify-content-between">
            @if (HasInput != 0)
            {
                IndexType3 index = new IndexType3();
                var result = t3.FirstOrDefault(o => o.id == HasInput);
                if (result == null)
                {
                    index.id = HasInput;
                }
                else
                {
                    index = (IndexType3)result;
                }
                <div class="d-flex flex-row align-items-center" style="gap: 10px; margin: 10px; margin-bottom: 15px;">
                    <p style="margin: 0; display: flex; align-items: center; margin-left: -10px;">@($"Index:{HasInput}")</p>
                    <input type="number" name="b1" style="width: 83px; border-radius: 10px;" step="0.1" placeholder="Value 1" @bind = "index.val1" disabled = "@isDisabled1">
                    <input type="number" name="b2" style="width: 83px; border-radius: 10px;" step="0.1" placeholder="Value 2" @bind="index.val2" disabled="@isDisabled2">
                    <button class="btn btn-secondary" style="font-size: 12px; width:100px;" @onclick="saveValues">Save</button>
                    @if(result == null && index.val1 == 0 && index.val2 == 0){
                        t3.Add(index);
                    }
                </div>
            }
            @foreach (var type1 in type1Indexes)
            {
                @if (type1.Key == CardID)
                {
                    foreach (var value in type1.Value)
                    {
                        IndexType1 index = new IndexType1();
                        var result = t1.FirstOrDefault(o => o.id == value);
                        if (result == null){
                            index.id = value;
                        }else{
                            index = (IndexType1)result;
                        }
                        <div class="d-flex flex-row align-items-center" style="gap: 10px;">
                            <p style="width: 60px">@($"Index:{value}")</p>
                            <select class="form-select form-select-sm mb-3" style="width: 90px;" @bind="index.keyValues[0]">
                                <option>0</option>
                                <option>0.25</option>
                                <option>1</option>
                            </select>
                            <select class="form-select form-select-sm mb-3" style="width: 90px;" @bind="index.keyValues[1]">
                                <option>0</option>
                                <option>1</option>
                            </select>
                            <select class="form-select form-select-sm mb-3" style="width: 90px;" @bind="index.keyValues[2]">
                                <option>0</option>
                                <option>1</option>
                            </select>
                        </div>
                        if (result == null && index.keyValues[0] == 0 && index.keyValues[1] == 0 && index.keyValues[2] == 0)
                        { 
                            t1.Add(index);
                        }
                    }
                }
            }

            @foreach (var type2 in type2Indexes)
            {
                @if (type2.Key == CardID)
                {
                    foreach (var value in type2.Value)
                    {
                        IndexType2 index = new IndexType2();
                        var result = t2.FirstOrDefault(o => o.id == value);
                        if (result == null)
                        {
                            index.id = value;
                        }
                        else
                        {
                            index = (IndexType2)result;
                        }
                        <div class="d-flex flex-row align-items-center" style="gap: 10px;">
                            <p style="width: 60px">@($"Index:{value}")</p>
                            <select class="form-select form-select-sm mb-3" style="width: 90px;" @bind="index.keyValues[0]">
                                <option>0</option>
                                <option>1</option>
                            </select>
                            <select class="form-select form-select-sm mb-3" style="width: 90px;" @bind="index.keyValues[1]">
                                <option>0</option>
                                <option>1</option>
                            </select>
                            <select class="form-select form-select-sm mb-3" style="width: 90px;" @bind="index.keyValues[2]">
                                <option>0</option>
                                <option>1</option>
                            </select>
                        </div>
                        if (result == null && index.keyValues[0] == 0 && index.keyValues[1] == 0 && index.keyValues[2] == 0)
                        {
                            t2.Add(index);  
                        }

                    }
                }
            }

            <div class="d-flex flex-row align-items-center justify-content-between" style="gap: 10px;">
                <button class="btn btn-primary" style="z-index: 0;" @onclick="Calculate">Calculate</button>

                <button class="btn p-0"
                style="background-color: lightblue; color: white; border: none; width: 36px; height: 36px; display: flex; justify-content: center; align-items: center; z-index: 0; position: relative; left: -10px;"
                @onclick="ToggleInfoPopup">
                    <i class="bi bi-question-circle" style="font-size: 1.5rem;"></i>
                </button>
            </div>
        </div>
    </div>
</div>

@if (isPopupVisible)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="border-radius: 8px; overflow: hidden;">
                <div class="modal-header" style="background-color: #f8f9fa; border-bottom: 1px solid #dee2e6;">
                    <h5 class="modal-title" style="font-weight: 600;">Calculated Information</h5>
                    <button type="button"
                    class="btn-close"
                    style="background: none; border: none; font-size: 1.2rem; color: #6c757d;"
                    aria-label="Close"
                    @onclick="TogglePopup"> x
                    </button>
                </div>
                <div class="modal-body" style="padding: 1rem; background-color: #ffffff;">
                    <p style="margin-bottom: 1rem; color: #212529;">This popup contains the calculated values based on the provided indexes and weights:</p>
                    <ul style="list-style-type: disc; padding-left: 1.5rem; color: #495057;">
                        @foreach (var value in CalculatedValues)
                        {
                            <li style="margin-bottom: 0.5rem;">@value</li>
                        }
                    </ul>
                </div>
                <div class="modal-footer" style="background-color: #f8f9fa; border-top: 1px solid #dee2e6; display: flex; justify-content: flex-end;">
                    <button type="button"
                    class="btn btn-secondary"
                    style="background-color: #6c757d; color: #fff; border: none; padding: 0.5rem 1rem; border-radius: 4px;"
                    @onclick="TogglePopup">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (isInfoPopupVisible)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.3);" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="border-radius: 10px; overflow: hidden;">
                <div class="modal-header" style="background-color: #e9ecef; border-bottom: 1px solid #ced4da;">
                    <h5 class="modal-title" style="font-weight: 600; color: #495057;">Indexes Configuration</h5>
                    <button type="button"
                            class="btn-close"
                            style="background: none; border: none; font-size: 1.2rem; color: #6c757d;"
                            aria-label="Close"
                            @onclick="ToggleInfoPopup">
                        
                    </button>
                </div>
                <div class="modal-body" style="padding: 1rem; background-color: #ffffff;">
                    <p style="margin-bottom: 1rem; color: #495057;">
                        Indexes are categorized into two groups: those with three dropdown menus for the input values and those featuring two text fields.
                    </p>
                    <p style="margin-bottom: 1rem; color: #495057;">
                        For indexes with text fields, the first field represents the base year value, while the second represents the evaluation year value. Once you’ve entered the data into the text fields, click the save button to confirm and lock the values.
                    </p>
                </div>
                <div class="modal-footer" style="background-color: #e9ecef; border-top: 1px solid #ced4da; display: flex; justify-content: flex-end;">
                    <button type="button"
                            class="btn btn-secondary"
                            style="background-color: #6c757d; color: #fff; border: none; padding: 0.5rem 1rem; border-radius: 4px;"
                            @onclick="ToggleInfoPopup">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}




@code {

    [Parameter]
    public EventCallback<Dictionary<int, double>> OnFinalIndexesCalculated { get; set; }

    public class IndexType1{
        public int id { get; set; }
        public Dictionary<int, float> keyValues = new Dictionary<int, float>
        {
            { 0, 0 },
            { 1, 0 },
            { 2, 0 }
        };

    }

    public class IndexType2{
        public int id { get; set; }
        public Dictionary<int, float> keyValues = new Dictionary<int, float>
        {
            { 0, 0 },
            { 1, 0 },
            { 2, 0 }
        };

    }

    public class IndexType3{
        public int id { get; set; }
        public double val1 { get; set; } = 0;
        public double val2 { get; set; } = 0;
    }

    public List<IndexType1> t1 = new List<IndexType1>();
    public List<IndexType2> t2 = new List<IndexType2>();
    public List<IndexType3> t3 = new List<IndexType3>();

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public int CardID { get; set; }

    [Parameter]
    public int HasInput { get; set; }

    public Dictionary<int, List<int>> type1Indexes = new Dictionary<int, List<int>>
    {
        {1, new List<int> {1, 2}},
        {2, new List<int> {4}},
        {3, new List<int> {5, 6}},
        {4, new List<int> {7}},
        {11, new List<int> {20}},
        {17, new List<int> {31, 32}}
    };

    public Dictionary<int, List<int>> type2Indexes = new Dictionary<int, List<int>>
    {
        {5, new List<int> {10, 11, 12}},
        {6, new List<int> {14}},
        {7, new List<int> {15, 16}},
        {10, new List<int> {19}},
        {11, new List<int> {21}},
        {12, new List<int> {22, 23}},
        {13, new List<int> {26}},
        {14, new List<int> {27}},
        {15, new List<int> {28}},
        {16, new List<int> {29}},
        {17, new List<int> {33, 34}}
    };

    public Dictionary<int, double> weights = new Dictionary<int, double>
    {
        {1,0.784},
        {2,0.216},
        {3,0.58},
        {4,0.42},
        {5,0.663},
        {6,0.337},
        {7,0.701},
        {8,0.299},
        {9,0.193},
        {10,0.257},
        {11,0.427},
        {12,0.123},
        {13,0.552},
        {14,0.448},
        {15,0.58},
        {16,0.264},
        {17,0.176},
        {18,1},
        {19,1},
        {20,0.465},
        {21,0.535},
        {22,0.291},
        {23,0.442},
        {24,0.266},
        {25,0.589},
        {26,0.441},
        {27,1},
        {28,1},
        {29,1},
        {30,0.241},
        {31,0.322},
        {32,0.18},
        {33,0.114},
        {34,0.143}
    };

    private bool isPopupVisible;
    private bool isInfoPopupVisible { get; set; } = false;
    private bool isDisabled1;
    private bool isDisabled2;


    private void TogglePopup()
    {
        isPopupVisible = !isPopupVisible;
    }

    private List<string> CalculatedValues { get; set; } = new List<string>();
    public static Dictionary<int, double> FinalIndexes = new Dictionary<int, double>();

    private void Calculate(MouseEventArgs e)
    {
        CalculatedValues.Clear();

        foreach(IndexType1 index in t1){

            double val = (index.keyValues[0] + index.keyValues[1] + index.keyValues[2]) * weights[index.id];
            val = Math.Round(val,3);
            CalculatedValues.Add($"Index:{index.id} = {val}");
            CheckForIndex(index.id,val);
        }

        foreach (IndexType2 index in t2)
        {
            double val = (index.keyValues[0] + index.keyValues[1] + index.keyValues[2]) * weights[index.id];
            val = Math.Round(val, 3);
            CalculatedValues.Add($"Index:{index.id} = {val}");
            CheckForIndex(index.id, val);
        }

        foreach(IndexType3 index in t3){
            if(index.val1 != 0){
                double val = index.val2 / index.val1;
                double res = 0;
                if (val < 1 && val > 0){
                    res = (1/val) * weights[index.id];
                }
                res = Math.Round(res, 3);
                CalculatedValues.Add($"Index:{index.id} = {res}");
                CheckForIndex(index.id,res);
            }
        }
        CheckForIndexTransfer();
        TogglePopup();
    }
    private void saveValues(MouseEventArgs e)
    {
        isDisabled1 = true;
        isDisabled2 = true;
    }

    private void CheckForIndex(int id, double val){
        if (!(FinalIndexes.ContainsKey(id)))
        {
            FinalIndexes.Add(id, val);
        }
        else
        {
            FinalIndexes[id] = val;
        }
    }
    public void CheckForIndexTransfer(){
        Console.WriteLine("CheckForIndexTransfer called, total indexes:" + FinalIndexes.Count);
        if(FinalIndexes.Count == 34){
            OnFinalIndexesCalculated.InvokeAsync(FinalIndexes);
        }
    }
    private void ToggleInfoPopup(MouseEventArgs e)
    {
        isInfoPopupVisible =  !isInfoPopupVisible;
    }
}

<style>
    .card-title-underline {
        text-decoration: underline;
        margin-bottom: 10px;
    }

    .card input,
    .card select {
        margin: 0; 
        padding: 0; 
        box-sizing: border-box;
    }

    .card input {
        margin-left: 0;
    }

</style>
