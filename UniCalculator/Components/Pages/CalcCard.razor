@inject NavigationManager NavigationManager

<div class="card m-2 shadow-lg" style="width: 25rem;">
    <div class="card-body">
        <h5 class="card-title card-title-underline">@Title</h5>
        <div class="d-flex flex-column justify-content-between">
            @if (HasInput != 0)
            {
                <div class="d-flex flex-row align-items-center" style="gap: 10px; margin: 10px; margin-bottom: 15px;">
                    <p style="margin: 0; display: flex; align-items: center; margin-left: -10px;">@($"Index:{HasInput}")</p>
                    <input type="number" name="b1" style="width: 83px; border-radius: 10px;" placeholder="Value 1">
                    <input type="number" name="b2" style="width: 83px; border-radius: 10px;" placeholder="Value 2">
                    <button class="btn btn-secondary" style="font-size: 12px; width:100px;">Save</button>
                </div>
            }
            @foreach (var type1 in type1Indexes)
            {
                @if (type1.Key == CardID)
                {
                    foreach (var value in type1.Value)
                    {
                        IndexType1 index = new IndexType1();
                        var result = t1.FirstOrDefault(o => o.id == value);
                        if (result == null){
                            index.id = value;
                        }else{
                            index = result;
                        }
                        <div class="d-flex flex-row align-items-center" style="gap: 10px;">
                            <p style="width: 60px">@($"Index:{value}")</p>
                            <select class="form-select form-select-sm mb-3" style="width: 90px;" @bind="index.values[0]">
                                <option selected disabled>@($"Value 1")</option>
                                <option>0</option>
                                <option>0.25</option>
                                <option>1</option>
                            </select>

                            @for (int i = 2; i <= 3; i++)
                            {
                                <select class="form-select form-select-sm mb-3" style="width: 90px;" @bind="index.values[i-1]">
                                    <option selected disabled>@($"Value {i}")</option>
                                    <option>0</option>
                                    <option>1</option>
                                </select>
                            }
                        </div>
                        if (!(result != null && result.values[0] == 0 && result.values[1] == 0 && result.values[2] == 0))
                        {
                            t1.Add(index);// add to the list only if all the values are saved. Currently not working.
                        }
                    }
                }
            }

            @foreach (var type2 in type2Indexes)
            {
                @if (type2.Key == CardID)
                {
                    foreach (var value in type2.Value)
                    {
                        IndexType2 index = new IndexType2();
                        var result = t2.FirstOrDefault(o => o.id == value);
                        if (result == null)
                        {
                            index.id = value;
                        }
                        else
                        {
                            index = result;
                        }
                        <div class="d-flex flex-row align-items-center" style="gap: 10px;">
                            <p style="width: 60px">@($"Index:{value}")</p>
                            @for (int i = 1; i <= 3; i++)
                            {
                                <select class="form-select form-select-sm mb-3" style="width: 90px;" @bind="index.values[i-1]">
                                    <option selected disabled>@($"Value {i}")</option>
                                    <option>0</option>
                                    <option>1</option>
                                </select>
                            }
                        </div>
                        if (!t2.Any(o => o.id == value)){
                            t2.Add(index);
                        }
                        
                    }
                }
            }

            <div class="d-flex flex-row align-items-center justify-content-between" style="gap: 10px;">
                <button class="btn btn-primary" style="z-index: 0;" @onclick="Calculate">Calculate</button>

                <button class="btn p-0"
                style="background-color: lightblue; color: white; border: none; width: 36px; height: 36px; display: flex; justify-content: center; align-items: center; z-index: 0; position: relative; left: -10px;"
                @onclick="TogglePopup">
                    <i class="bi bi-question-circle" style="font-size: 1.5rem;"></i>
                </button>
            </div>
        </div>
    </div>
</div>

@if (isPopupVisible)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">More Info</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="TogglePopup"></button>
                </div>
                <div class="modal-body">
                    <p>This popup contains more details about @Title.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="TogglePopup">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    public class IndexType1{
        public int id { get; set; }
        public List<int> values { get; set; } = new List<int> { 0, 0, 0 };
    }

    public class IndexType2{
        public int id { get; set; }
        public List<int> values { get; set; } = new List<int> { 0, 0, 0 };
    }

    public class IndexType3{
        public int id { get; set; }
        public int val1 { get; set; }
        public int val2 { get; set; }
    }

    public List<IndexType1> t1 = new List<IndexType1>();
    public List<IndexType2> t2 = new List<IndexType2>();
    public List<IndexType3> t3 = new List<IndexType3>();


    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public int CardID { get; set; }

    [Parameter]
    public int HasInput { get; set; }

    public Dictionary<int, List<int>> type1Indexes = new Dictionary<int, List<int>>
    {
        {1, new List<int> {1, 2}},
        {2, new List<int> {4}},
        {3, new List<int> {5, 6}},
        {4, new List<int> {7}},
        {11, new List<int> {20}},
        {17, new List<int> {31, 32}}
    };

    public Dictionary<int, List<int>> type2Indexes = new Dictionary<int, List<int>>
    {
        {5, new List<int> {10, 11, 12}},
        {6, new List<int> {14}},
        {7, new List<int> {15, 16}},
        {10, new List<int> {19}},
        {11, new List<int> {21}},
        {12, new List<int> {22, 23}},
        {13, new List<int> {26}},
        {14, new List<int> {27}},
        {15, new List<int> {28}},
        {16, new List<int> {29}},
        {17, new List<int> {33, 34}}
    };

    private bool isPopupVisible;


    private void TogglePopup()
    {
        isPopupVisible = !isPopupVisible;
    }
    private void Calculate(MouseEventArgs e)
    {
        for (int i = 0; i < t1.Count; i++)
        {
            Console.WriteLine($"Id: {t1[i].id}, Values: {string.Join(", ", t1[i].values)}");
        }

        Console.WriteLine("\nIndexType2 List:");
        for (int i = 0; i < t2.Count; i++)
        {
            Console.WriteLine($"Id: {t2[i].id}, Values: {string.Join(", ", t2[i].values)}");
        }

    }
}

<style>
    .card-title-underline {
        text-decoration: underline;
        margin-bottom: 10px;
    }

    .card input,
    .card select {
        margin: 0; /* Remove any default margins */
        padding: 0; /* Ensure no extra padding */
        box-sizing: border-box; /* Consistent sizing for all elements */
    }

    .card input {
        margin-left: 0; /* Reset specific margins, if any */
    }

</style>
